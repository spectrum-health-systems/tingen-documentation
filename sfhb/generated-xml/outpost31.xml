<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Outpost31</name>
    </assembly>
    <members>
        <member name="T:Outpost31.Core.Analyze.AvatarField">
            <summary>Logic related to fields on Avatar forms.</summary>
            <remarks>
              An argument can be made that some of these methods should be part of the method that calls them, but I would
              rather route logic through here to keep logging consistent.
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Analyze.AvatarField.ExeAsm">
            <summary>A required log file component.</summary>
        </member>
        <member name="M:Outpost31.Core.Analyze.AvatarField.AreEqual(System.String,System.String,System.Int32,System.String)">
            <summary>Determines whether the value of two fields are the same.</summary>
            <param name="fieldIdOne">The first FieldID.</param>
            <param name="fieldIdTwo">The second FieldID.</param>
            <returns><see langword="true"/>if the values are the same; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Outpost31.Core.Analyze.AvatarField.GetValue(ScriptLinkStandard.Objects.OptionObject,System.String,System.Int32,System.String)">
            <summary>Get the value of a specified field from the provided <see cref="T:ScriptLinkStandard.Objects.OptionObject"/>.</summary>
            <param name="optObj">The <see cref="T:ScriptLinkStandard.Objects.OptionObject"/> instance.</param>
            <param name="fieldId">The FieldID whose value is to be retrieved.</param>
            <returns>The value of the specified field as a string, or an empty string if the field does not exist.</returns>
        </member>
        <member name="T:Outpost31.Core.Analyze.UserIdUserDescriptionFile">
            <summary>Logic related to the USERID_User Description.txt file.</summary>
            <remarks>
                About this file.
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Analyze.UserIdUserDescriptionFile.ExeAsm">
            <summary>A required log file component.</summary>
        </member>
        <member name="M:Outpost31.Core.Analyze.UserIdUserDescriptionFile.GetFullAvatarUserName(System.String,System.Int32,System.String)">
            <summary>Get the full username of an Avatar Username/</summary>
            <remarks>
                e.g., JDOE becomes John Doe
            </remarks>
            <param name="avatarUserName">The username of the avatar to look up</param>
            <returns>The full name of the user associated with the specified avatar username.</returns>
        </member>
        <member name="T:Outpost31.Core.Avatar.AvatarEnvironment">
            <summary>Logic for Avatar environment components.</summary>
            <remarks>
                An Avatar environment consists of two components: the <see cref="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSys">Avatar System</see> and <see cref="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSysCode">Avatar System Code</see>.<br/>
                <br/>
                While both contain the word<i> system</i>, they are not the same! It is important to understand the difference between the two.<br/>
                <br/>
                For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSys">
            <summary>The Avatar System that the Tingen Web Service will interface with.</summary>
            <remarks><note type="todo" title="How-To">
                    <h3>Modify the AvtrSys setting</h3>
                    <list type="number">
                        <item>
                            Open the <c>Web.Config</c> file located in the root directory of the Tingen Web Service.
                        </item>
                        <item>
                            Locate the <c>AvtrSys</c> setting within the <c>applicationSettings</c> section.
                        </item>
                        <item>
                            Change the value of the <c>AvtrSys</c> setting to the desired value.
                        </item>
                        <item>
                            Save the changes to the <c>Web.Config</c> file.
                        </item>
                    </list>
                    For example, to set the Avatar System to `LIVE`:
                    <code>
                        &lt;setting name="AvtrSys" serializeAs="String"&gt;
                            &lt;value&gt;LIVE&lt;/value&gt;
                        &lt;/setting&gt;
                    </code>
                    Changes to the <c>AvtrSys</c> setting will be applied the next time the Tingen Web Service is executed.<br />
                </note></remarks>
            <value>The default value is <c>UAT</c>.</value>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSysCode">
            <summary>The Avatar System Code used to login to Avatar.</summary>
        </member>
        <member name="T:Outpost31.Core.Avatar.AvatarOptionObject">
            <summary>The AvatarOptionObject contains metadata about the Avatar environment.</summary>
            <remarks>For more information about Outpost31, please see the <see cref="T:Outpost31.ProjectInfo"/> file.</remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarOptionObject.ExeAsm">
            <summary>A required log file component.</summary>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarOptionObject.Original">
            <summary>The original <see cref="T:ScriptLinkStandard.Objects.OptionObject2015">OptionObject</see> sent from Avatar.</summary>
            <remarks>This OptionObject is <i>never</i> modified during a Tingen Web Service session.</remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarOptionObject.Worker">
            <summary>The <see cref="T:ScriptLinkStandard.Objects.OptionObject2015">OptionObject</see> where work is done.</summary>
            <remarks>This OptionObject is <i>potentially</i> modified during a Tingen Web Service session.</remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarOptionObject.Completed">
            <summary>The finalized <see cref="T:ScriptLinkStandard.Objects.OptionObject2015">OptionObject</see> that is returned to Avatar.</summary>
            <remarks>This is the finalized OptionObject, ready to be returned to Avatar.</remarks>
        </member>
        <member name="M:Outpost31.Core.Avatar.AvatarOptionObject.VerifyExistence(ScriptLinkStandard.Objects.OptionObject2015)">
            <summary>Verify if an OptionObject was sent from Avatar.</summary>
            <param name="origOptObj">The original OptionObject sent from Avatar.</param>
            <returns>A string indicating if an OptionObject was sent or not.</returns>
        </member>
        <member name="T:Outpost31.Core.Avatar.AvatarScriptParameter">
            <summary>
            Represents a parameter sent from Avatar, providing functionality to verify its existence and parse requests.
            </summary>
            <remarks>
                This class includes methods to validate and process script parameters sent from Avatar.  It
                also provides access to the executing assembly name through the <see cref="P:Outpost31.Core.Avatar.AvatarScriptParameter.ExeAsm"/> property.<br>
                </br>
                For more information about Outpost31, please see the <see cref="T:Outpost31.ProjectInfo"/> file.
            </remarks>
        </member>
        <member name="P:Outpost31.Core.Avatar.AvatarScriptParameter.ExeAsm">
            <summary>A required log file component.</summary>
        </member>
        <member name="M:Outpost31.Core.Avatar.AvatarScriptParameter.VerifyExistence(System.String)">
            <summary>Verify if a Script Parameter was sent from Avatar.</summary>
            <remarks>No logging done here because the logging functionality isn't setup yet.</remarks>
            <param name="origScriptParam">The original Script Parameter sent from Avatar.</param>
            <returns>A string indicating if an Script Parameter was sent or not.</returns>
        </member>
        <member name="M:Outpost31.Core.Avatar.AvatarScriptParameter.ParseRequest(Outpost31.Core.TngnWsvcSession.Instance)">
            <summary>Parse a request.</summary>
            <param name="sess"></param>
        </member>
        <member name="T:Outpost31.Core.Du.DuJson">
            <summary>Provides JSON functionality.</summary>
            <remarks>No loging done here.</remarks>
        </member>
        <member name="M:Outpost31.Core.Du.DuJson.ExportToLocalFile``1(``0,System.String,System.Boolean)">
            <summary>Export JSON data to an external file.</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="jsonObject">The JSON object.</param>
            <param name="filePath">The export file path.</param>
            <param name="formatJson">Determines if the JSON data is formatted.</param>
        </member>
        <member name="M:Outpost31.Core.Du.DuJson.ImportFromLocalFile``1(System.String)">
            <summary>Import JSON data from an external file.</summary>
            <typeparam name="JsonObject">The JSON object type.</typeparam>
            <param name="filePath">The import file path.</param>
            <returns>The contents of the file as a JSON object.</returns>
        </member>
        <member name="T:Outpost31.Core.Framework.Folders">
            <summary>Represents a set of folder paths used by the Outpost31 framework.</summary>
            <remarks>For more information about Outpost31, please see the <see cref="T:Outpost31.ProjectInfo"/> file.</remarks>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.BaseWww">
            <summary>
            Gets or sets the path to the system WWW folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.BaseData">
            <summary>
            Gets or sets the path to the system data folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.AppData">
            <summary>
            Gets or sets the path to the application data folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.Archives">
            <summary>
            Gets or sets the path to the archive folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.Blueprints">
            <summary>
            Gets or sets the path to the blueprint folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.Exports">
            <summary>
            Gets or sets the path to the export folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.Imports">
            <summary>
            Gets or sets the path to the import folder.
            </summary>
        </member>
        <member name="P:Outpost31.Core.Framework.Folders.CurrentSession">
            <summary>
            Gets or sets the path to the session folder.
            </summary>
        </member>
        <member name="M:Outpost31.Core.Framework.Folders.Load(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Loads folder paths based on provided parameters.
            </summary>
            <param name="systemDataFolder">The system data folder path.</param>
            <param name="systemWwwFolder">The system WWW folder path.</param>
            <param name="avatarUser">The avatar user name.</param>
            <param name="date">The date string.</param>
            <param name="time">The time string.</param>
            <returns>A <see cref="T:Outpost31.Core.Framework.Folders"/> instance with initialized paths.</returns>
        </member>
        <member name="M:Outpost31.Core.Framework.Folders.CreateFolderFramework(Outpost31.Core.Framework.Folders)">
            <summary>
            Creates the folder framework by ensuring all folders exist.
            </summary>
            <param name="folders">The <see cref="T:Outpost31.Core.Framework.Folders"/> instance containing folder paths.</param>
            <param name="traceLogLimit">The trace log limit.</param>
        </member>
        <member name="M:Outpost31.Core.Framework.Folders.CreateSessionFolder(System.String)">
            <summary>
            Creates the session folder if it does not exist.
            </summary>
            <param name="sessionFolder">The session folder path.</param>
        </member>
        <member name="T:Outpost31.Core.Logger.LogEvent">
            <summary>Logs an application event.</summary>
            <remarks>
                Don't put log files here.
                For more information about Outpost31, please see the <see cref="T:Outpost31.ProjectInfo"/> file.
            </remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.LogEvent.Critical(System.String,Outpost31.Core.Framework.Folders,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Generate a critical log.</summary>
        </member>
        <member name="M:Outpost31.Core.Logger.LogEvent.Trace(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Generate a trace log.</summary>
        </member>
        <member name="M:Outpost31.Core.Logger.LogEvent.Error(System.String,Outpost31.Core.Framework.Folders,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>Generate an error log.</summary>
            <remarks>code after msg because sometimes no code but message</remarks>
        </member>
        <member name="M:Outpost31.Core.Logger.LogUtility.GetClassName(System.String)">
            <summary>Get the class name from the full class path.</summary>
            <param name="classPath"></param>
            <returns></returns>
        </member>
        <member name="T:Outpost31.Core.Parse.Request">
            <summary>Parses requests.</summary>
            <remarks>For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.</remarks>
            <summary>Parses requests.</summary>
            <remarks>For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.</remarks>
            <summary>Parses requests.</summary>
            <remarks>For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.</remarks>
            <summary>Parses requests.</summary>
            <remarks>For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.</remarks>
        </member>
        <member name="P:Outpost31.Core.Parse.Request.ExeAsm">
            <summary>A required log file component.</summary>
        </member>
        <member name="T:Outpost31.Core.TngnWsvcSession.Details">
            <summary>Detailed information about the current Tingen Web Service session.</summary>
            <remarks>For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.</remarks>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.Date">
            <summary>Current date.</summary>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.Time">
            <summary>Current time.</summary>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.Version">
            <summary>The current version of the Tingen Web Service.</summary>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.Mode">
            <summary>
            The Tingen Web Service mode, which determines what the Tingen Web Service will do, if anything.
            </summary>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.AvatarSys">
            <summary>
            The Avatar system that the Tingen Web Service will interface with.
            </summary>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.AvatarUserName">
            <summary>The Avatar Username that initiated the current Tingen Web Service session, converted to lowercase.</summary>
        </member>
        <member name="P:Outpost31.Core.TngnWsvcSession.Details.RunningLog">
            <summary>Log of actions taken during the current Tingen Web Service session.</summary>
        </member>
        <member name="M:Outpost31.Core.TngnWsvcSession.Details.Load(System.String,System.String,System.String,System.String)">
            <summary>Creates and initializes a new <see cref="T:Outpost31.Core.TngnWsvcSession.Details"/> instance with the specified parameters.</summary>
            <param name="version">The current <see cref="P:Outpost31.Core.TngnWsvcSession.Details.Version"/> of the Tingen Web Service.</param>
            <param name="mode">The Tingen Web Service <see cref="P:Outpost31.Core.TngnWsvcSession.Details.Mode"/>.</param>
            <param name="avatarSys">The <see cref="P:Outpost31.Core.TngnWsvcSession.Details.AvatarSys"/> that the Tingen Web Service will interface with.</param>
            <param name="avatarUserName">The <see cref="P:Outpost31.Core.TngnWsvcSession.Details.AvatarUserName"/>.</param>
            <returns>A <see cref="T:Outpost31.Core.TngnWsvcSession.Details"/> object populated with the provided parameters and the current date and time.</returns>
        </member>
        <member name="T:Outpost31.Core.TngnWsvcSession.Instance">
            <summary>Manages the current Tingen Web Service session.</summary>
            <remarks>For more information about Outpost31, please see the <see cref = "T:Outpost31.ProjectInfo"/> file.</remarks>
        </member>
        <member name="T:Outpost31.Module.Administration.Deployment">
            <summary>Administrative deployment functionality.</summary>
        </member>
        <member name="P:Outpost31.Module.Administration.Deployment.AsmName">
            <summary>A required log file component.</summary>
        </member>
        <member name="M:Outpost31.Module.Administration.Deployment.Deploy(Outpost31.Core.TngnWsvcSession.Instance)">
            <summary>Deploy the Tingen Web Service framework.</summary>
            <param name="avatarSystem">The <see cref="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSys"/></param>
        </member>
        <member name="M:Outpost31.Module.Administration.Deployment.RefreshAppData(System.String,System.String,System.String)">
            <summary>Refresh application data that is required by the Tingen Web Service.</summary>
            <param name="avatarSystem">The <see cref="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSys"/></param>
        </member>
        <member name="M:Outpost31.Module.Administration.Deployment.CopyDirectory(System.String,System.String)">
            TODO move to a utility class
        </member>
        <member name="T:Outpost31.Module.Administration.Testing">
            <summary>Administrative testing functionality.</summary>
        </member>
        <member name="P:Outpost31.Module.Administration.Testing.AsmName">
            <summary>A required log file component.</summary>
        </member>
        <member name="M:Outpost31.Module.Administration.Testing.Regression(Outpost31.Core.Framework.Folders,System.Int32)">
            <summary>Runs regression tests.</summary>
            <param name="sentOptionObject">The <see cref="T:ScriptLinkStandard.Objects.OptionObject2015"/> sent from Avatar.</param>
            <param name="sentScriptParameter">The original Script Parameter that is sent from Avatar.</param>
            <param name="tngnWsvcVer">The current version of the Tingen Web Service.</param>
            <param name="avatarSystem">The <see cref="P:Outpost31.Core.Avatar.AvatarEnvironment.AvatarSys"/>Avatar system that the Tingen Web Service will interface with.</param>
        </member>
        <member name="M:Outpost31.Module.Administration.Testing.GenerateAppLogs(Outpost31.Core.Framework.Folders,System.Int32)">
            <summary>Generates various application logs.</summary>
            <param name="avatarSystem">The identifier for the avatar system or application context in which the logging operations are performed.</param>
            <param name="msec">Pause, in milliseconds.</param>
        </member>
        <member name="T:Outpost31.Module.OpenIncident">
            <summary>Logic related to Avatar OpenIncident functionality.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.ExeAsm">
            <summary>A required log file component.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.Mode">
            <summary>The OpenIncident Module mode.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.Whitelist">
            <summary>List of Avatar Usernames that can always use this functionality.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.Greylist">
            <summary>List of Avatar Usernames that will ignore this functionality.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.Blacklist">
            <summary>List of Avatar Usernames that are restricted from using this functionality.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.PersonCompletingIncidentFormFieldId">
            <summary>The FieldID containing the Avatar Username that originally completed the form.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.OpenFormMsg">
            <summary>Message to display when the form is opened by somebody other than the person that originally completed the form.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.OpenFormErrCode">
            <summary>Error Code to return when the form is opened by somebody other than the person that originally completed the form.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.SubmitFormMsg">
            <summary>Message to display when the form is submitted by somebody other than the person that originally completed the form.</summary>
        </member>
        <member name="P:Outpost31.Module.OpenIncident.SubmitFormErrCode">
            <summary>Error Code to return when the form is submitted by somebody other than the person that originally completed the form.</summary>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.LoadConfig(System.String,System.Int32,System.String)">
            <summary>Loads the OpenIncident Module configuration.</summary>
            <remarks>If the specified file does not exist, a default configuration file is created.</remarks>
            <param name="configAbsolutePath">The file path to the configuration file.</param>
            <param name="traceLogLimit">The <see cref="P:Outpost31.Core.Logger.LogSettings.TraceLogLimit"/></param>
            <param name="currentSessionFolder">The folder path for the current session, used for logging trace information.</param>
            <returns>An <see cref="T:Outpost31.Module.OpenIncident"/> object representing the loaded configuration.</returns>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.DeployConfig(System.String,System.Int32,System.String)">
            <summary>Deploys the default OpenIncident Module configuration file.</summary>
            <param name="configAbsolutePath">The configuration file path.</param>
            <param name="traceLogLimit">The <see cref="P:Outpost31.Core.Logger.LogSettings.TraceLogLimit"/></param>
            <param name="currentSessionFolder">The folder path for the current session, used for logging trace information.</param>
        </member>
        <member name="M:Outpost31.Module.OpenIncident.IsOriginalAuthorOpening(Outpost31.Core.TngnWsvcSession.Instance,Outpost31.Module.OpenIncident)">
            <summary>Checks to see if the person opening the form is the original author.</summary>
            <remarks>
                Only the original author can submit changes to the form, others can only view it.
                TODO - why we match on full name instead of Avatar username
            </remarks>
            <param name="sess">The <see cref="N:Outpost31.Core.TngnWsvcSession"/></param>
        </member>
        <member name="T:Outpost31.ProjectInfo">
            <summary>Provides additional information about Outpost31.</summary>
            <remarks>
              <para>
                <b>About Outpost31</b><br />
                Outpost31 is the back-end logic for the Tingen Web Service.
            </para><br />
              <para>
                <note type="information" title="Source code comments">
                    Tingen project source code uses the following types of comments:<br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project">Tingen Documentation Project</see><br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project/tree/main/manuals/tngnsrvc">Tingen Web Service Manual</see><br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project/tree/main/development">Development Documentation</see>
                </note>
            </para><br />
              <para>
                <note type="information" title="Source code comments">
                    Tingen project source code uses the following types of comments:<br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project">Tingen Documentation Project</see><br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project/tree/main/manuals/tngnsrvc">Tingen Web Service Manual</see><br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project/tree/main/development">Development Documentation</see>
                </note>
            </para><br />
              <para>
                <note type="information" title="Project repositories">
                    Tingen project repositories:<br />
                    <see href="https://github.com/spectrum-health-systems/tingen-web-service">Tingen Web Service</see><br />
                    <see href="https://github.com/spectrum-health-systems/outpost31">Outpost32</see>
                </note>
            </para><br />
              <para>
                <note type="information" title="Project documentation">
                    Tingen project documentation:<br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project">Tingen Documentation Project</see><br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project/tree/main/manuals/tngnsrvc">Tingen Web Service Manual</see><br />
                    <see href="https://github.com/spectrum-health-systems/tingen-documentation-project/tree/main/development">Development Documentation</see>
                </note>
            </para><br />
            </remarks>
        </member>
    </members>
</doc>
